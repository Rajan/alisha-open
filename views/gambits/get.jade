extends ../_layout.jade
block content
  .container
    .row
      .page-header
        if (parent && parent.replies)
          h2 Gambit in reply to '<a href="/gambits/#{parent._id}">#{parent.input}</a>' >> '<a href="/replies/#{parent.replies[0]._id}">#{parent.replies[0].reply}</a>'
        else if (parent && parent.gambits)
          h2 Gambit in topic '<a href="/topics/#{parent._id}">#{parent.name}</a>'
        else
          h2 Gambit

        - if (success_messages.length != 0)
          p.bg-success= success_messages

        //- code
        //-   pre= gambit
        //-   pre= topic
        //-   pre= parent
        //-   pre= reply

    .row
      - if (error_messages.length != 0)
        p.bg-warning= error_messages

      - if (gambit.input == gambit.trigger && /(~\w+)/.test(gambit.input))
        p.clearfix.pull-right.label.label-warning Concept Not Expanded

    form.form-horizontal#js-main(action="/gambits/#{gambit._id}", method="post")
      if (isNew === true && parent && parent.replies)
        input(type="hidden", name="replyId", value="#{parent.replies[0]._id}")
      else if (isNew === true && parent && parent.gambits)
        input(type="hidden", name="topicId", value="#{parent._id}")
      else 
        input(type="hidden", id="putMethod" name="_method", value="put")
        if (topic)
          input(type="hidden", name="topicId", value="#{topic._id}")

      .form-group
        label.col-sm-2.control-label(for='formName') Input
        .col-sm-8
          input#formName.form-control.input-lg(type='text', name="input", placeholder='Input', value='#{gambit.input||""}')
        .col-sm-2            
          input.form-control.input-lg(type='text', name="filter", placeholder='Filter Function', value='#{gambit.filter||""}')
      .form-group
        .col-sm-offset-2.col-sm-10
          .checkbox
            label
              if gambit.isQuestion
                input#js-isQuestion(type='checkbox', name="isQuestion", checked="true") 
                | Match Questions
              else 
                input#js-isQuestion(type='checkbox', name="isQuestion") 
                | Match Questions

      .form-group.js-questionType
        label.col-sm-2.control-label(for='reply') Question Type
        .col-xs-3
          select#qtype.form-control(name="qType")
            option(value="") All Question Types
            if gambit.qType == "WH"
              option(value="WH" selected="") Question word
            else 
              option(value="WH") Question word
            
            if gambit.qType == "YN"
              option(value="YN" selected="") Yes/No
            else
              option(value="YN" ) Yes/No

            if gambit.qType == "TG"
              option(value="TG" selected="") Tag Question
            else
              option(value="TG") Tag Question

            if gambit.qType == "CH"
              option(value="CH" selected="") Choice Question
            else
              option(value="CH") Choice Question
            
      #replyGroup

      if (topic)
        .form-group
          label.col-sm-2.control-label Topic
          .col-xs-3
            select#topics.form-control(name="topic")
              each t in topics
                if (String(t._id) === String(topic._id))
                  option(value="#{t._id}" selected="selected")= topic.name
                else
                  option(value="#{t._id}")= t.name

      .form-group
        .col-sm-offset-2.col-sm-10
          if isNew
            button.btn.btn-default(type='submit') Create Gambit
          else 
            button.btn.btn-default(type='submit') Update Gambit
            | 
            input#js-del.btn.btn-danger(type="button" name="delete" value="Delete Gambit")


    // Gambits should only belong in one topic.
    if (reply && parent || topic)
      .row
        .page-header
          h3 This Gambit apprars in:
          
          if reply && parent
            b Reply: 
              a(href="/gambits/#{parent._id}")=reply.reply
          else 
            b Topic: 
              a(href="/topics/#{topic._id}")=topic.name

    if (!isNew)
      .row
        .page-header
          h3 Test Gambit

      form.form-horizontal.js-submitTest
        .form-group
          label.col-sm-2.control-label(for='testPhrase') Test phrase
          .col-sm-10
            input#testPhrase.form-control.input-lg(type='text', name="phrase", placeholder='Test Phrase')

        .form-group
          .col-sm-offset-2.col-sm-10
            a.js-testPhrase.btn.btn-default Test Gambit

    script.
      $('.js-submitTest').submit(function(e){
        e.preventDefault();
        $('.js-testPhrase').trigger('click');
      });

      // Check to see if we can match
      $('.js-testPhrase').click(function(e){
        e.preventDefault;
        var string = $("#testPhrase").val();

        $.ajax({ 
          url: '/gambits/#{gambit._id}/test', 
          type: 'POST',
          data: {
            phrase: string
          },
          success: function(result) {
            var stars = [];

            if (result) {
              for (var i = 1; i <= result.length;i++){
                stars.push(result[i]);
              }
              if (stars.length != 0) {
                swal("Tested", "Yay found matches\n" + stars, "success");   
              } else {
                swal("Tested", "Yay it matches","success"); 
              }
            } else {
              swal("Tested", "'" + string + "' does not match", "error"); 
            }              
          }
        });
      });

      var loadPlugins = function() {
        var plugins = new Bloodhound({
          datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
          queryTokenizer: Bloodhound.tokenizers.whitespace,
          limit: 10,
          prefetch: {
            url: '/plugins',
            filter: function(list) {
              return $.map(list, function(plugin) { return { name: plugin }; });
            }
          }
        });
         
        // kicks off the loading/processing of `local` and `prefetch`
        plugins.initialize();
        $('.typeahead').typeahead(null, {
          name: 'plugins',
          displayKey: 'name',
          source: plugins.ttAdapter()
        });
      }

      $.get("/gambits/#{gambit._id}/replies", function(replies){
        for (var i = 0; i < replies.length; i++) {
          var reply = ich.reply(replies[i]);
          $('#replyGroup').append(reply);
        }

        var reply = ich.reply({});
        $('#replyGroup').append(reply);
        loadPlugins();
      });

      $("#js-del").on('click', function(e) {
        e.preventDefault();
        $("#putMethod").attr("value", "delete");
        $("#js-main").trigger("submit");
      });

      // Edit Reply
      $("#replyGroup").on({
        click:function(e){
          e.preventDefault();
          var $group = $(this).parents('.js-reply-group');
          var replyId = $group.data('id');
          var replyString = $group.find('.reply').val();
          //- var filterFunction = $group.find('.filter').val();
          var filterFunction = $group.find('.typeahead').typeahead('val');
          
          if (replyString === "") {
            swal("Ooops...", "Reply can not be empty", "error"); 
          } else {
            $.ajax({ 
              url: '/gambits/#{gambit._id}/reply/' + replyId, 
              type: 'PUT',
              data: {
                reply: replyString,
                filter: filterFunction
              },
              success: function(result) {
                swal("Sweet", "Reply has been updated", "success"); 
              }
            });
          }
        }
      }, ".js-replyEdit");

      // Add Reply
      $("#replyGroup").on({
        click:function(e){
          e.preventDefault();

          // Check to make sure the gambit is not new.
          if ($('#putMethod').length != 0) {
            $group = $(this).parents('.js-reply-group');
            var replyString = $group.find('.reply').val();
            var filterFunction = $group.find('.filter').val();

            if (replyString === "") {
              swal("Ooops...", "Reply can not be empty", "error"); 
            } else {
              $.ajax({ 
                url: '/gambits/#{gambit._id}/reply', 
                type: 'POST',
                data: {
                  reply: replyString,
                  filter: filterFunction
                },
                success: function(result) {
                  console.log(result)
                  var reply = ich.reply(result);
                  $group.before(reply);
                  $group.find('input').val("");
                }
              });
            }
          } else {
            swal("Ooops...", "We need to create this gambit before adding a reply.\nHit 'Create Gambit' below.", "error"); 
          }
        }
      }, ".js-replyAdd");
      
      // Remove Reply
      $("#replyGroup").on({
        click:function(e){
          e.preventDefault();
          var $group = $(this).parents('.js-reply-group');
          var replyId = $group.data('id')
          swal({
            title: "Are you sure?",   
            text: "You will not be able to recover this reply!",   
            type: "warning",   
            showCancelButton: true,   
            confirmButtonColor: "#DD6B55",   
            confirmButtonText: "Yes, delete it!",   
            closeOnConfirm: true 
          }, function(){   
            $.ajax({ 
              url: '/gambits/#{gambit._id}/reply',
              type: 'DELETE',
              data: {
                replyId: replyId
              },
              success: function(result) {
                $group[0].remove();
              }
            });
          });
        }
      }, ".js-replyDelete");

      // Remove Reply
      $("#replyGroup").on({
        click:function(e){
          e.preventDefault();

        }
      }, ".js-replyExpand");

      if (!$('input#js-isQuestion').is(':checked')) {
        $('.js-questionType').addClass('hidden');
      }

      $("#js-isQuestion").click(function(e){
        $('.js-questionType').toggleClass('hidden');
      });
      

    script(id="reply" type="text/html").
      <div class="form-group js-reply-group" data-id="{{_id}}">

        <label class="col-sm-2 control-label">Reply</label>
        <div class="col-sm-2">
          <input class="filter typeahead form-control" placeholder="Filter Function" value="{{filter}}">
        </div>
        
        <div class="col-sm-5">
          <textarea class="reply form-control" rows="1" placeholder="Reply" >{{reply}}</textarea>
        </div>
        <div class="col-sm-2">
          {{#reply}}
            <a href="#" class="js-replyEdit btn btn-success">
              <span class="glyphicon glyphicon-pencil" aria-hidden='true'>
            </a>
            <a href="/gambits/new?replyId={{_id}}" class=" btn btn-primary">
              <span class=" glyphicon glyphicon-chevron-right" aria-hidden='true'>
            </a>

            &nbsp;
            <a href="#" class="js-replyDelete btn btn-danger">
              <span class="glyphicon glyphicon-remove" aria-hidden='true'>
            </a>

          {{/reply}}

          {{^reply}}
            <a href="#" class="js-replyAdd btn btn-success">
              <span class="glyphicon glyphicon-plus" aria-hidden='true'>
            </a>
          {{/reply}}

        </div>
      </div>


